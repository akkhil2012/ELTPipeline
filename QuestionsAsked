https://leetcode.com/discuss/interview-question/1140451/helpful-list-of-leetcode-posts-on-system-design-at-facebook-google-amazon-uber-microsoft

Storage estimation in system design???
like size of image etcc, QPS

System Design API Design to functonal requirement

===========================

Role based Authentication in spring
============================

role based authentication:

https://www.baeldung.com/role-and-privilege-for-spring-security-registration



Let's start with our entities. We have three main entities:

The User
The Role represents the high-level roles of the user in the system. Each role will have a set of low-level privileges.
The Privilege represents a low-level, granular privilege/authority in the system.

We're creating the privileges.
Then we're creating the roles and assigning the privileges to them.
Finally, we're creating a user and assigning a role to it



============================
OAuth
completable future for Async
database sharding
A/B , unit testing
SLA time,UP Time
Role based Authntication
Datamodel/availibilty
1. comparable vs comparator
2. default in java8
3. groupBy in stream
4. why kafka and one time gaurantee
5. Api by role in spring security
6. real time data processing in videos
7. diamond problem
8. static vs singleton
9. rest endpoints and design service
10. Design API for cowin App.
11. lru cache
12. chess / snakeladder/parking
13. job schedular
14.Stock leetcode
15. make paranthesis valid
16. PUT vs patch
minstack
minimum meeting rooms
trapping wter
spiral matrix
producer consumer 
threadlocal
volatile vs atomic
thread communication using synchronized
circuit breaker
resiliency pattern
WebSocket Server
Payment Gateway
MultiMediaPlayer
Distrbute logging in micro
Producer-Consumer using wait notify


A Thread Pool is a famous design pattern which consists of a number N of threads running a number M of jobs concurrently. The main motivation behind using the pattern is to avoid the overhead associated with creating and destroying threads. The more straight-forward approach of handling M independent jobs would be to spawn a thread for each job and destroy the thread once the job is executed.
