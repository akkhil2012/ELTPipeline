JavaCore
Java9

CHAPTER 1:

Static factory methods:
1.
In cases where a class seems to require
multiple constructors with the same signature, replace the constructors with static
factory methods and carefully chosen names to highlight their differences.
2.
A second advantage of static factory methods is that, unlike constructors,
they are not required to create a new object each time they’re invoked
This technique is similar to the
Flyweight pattern [Gamma95]. It can greatly improve performance if equivalent
objects are requested often, especially if they are expensive to create
3.
A third advantage of static factory methods is that, unlike constructors,
they can return an object of any subtype of their return type
4.
A fourth advantage of static factories is that the class of the returned
object can vary from call to call as a function of the input parameters.
. Any subtype of the declared return type is permissible. The class of the returned object can
also vary from release to release

A fifth advantage of static factories is that the class of the returned object
need not exist when the class containing the method is written. Such flexible
static factory methods form the basis of service provider frameworks, like the Java
Database Connectivity API (JDBC). A service provider framework is a system in
which providers implement a service, and the system makes the implementations
available to clients, decoupling the clients from the implementations??????????????????????????????????????????/

The main limitation of providing only static factory methods is that
classes without public or protected constructors cannot be subclassed.
============================
the Builder pattern is a good choice when designing classes
whose constructors or static factories would have more than a handful of
parameters
=============================
 Making a class a singleton can
make it difficult to test its clients because it’s impossible to substitute a mock
implementation for a singleton unless it implements an interface that serves as its
type.
a single-element
enum type is often the best way to implement a singleton. ???????????????????????explain


A default constructor is generated only if a class contains no explicit constructors, so a class can be
made noninstantiable by including a private constructor: and not by using abstract class.

Static utility classes and singletons are inappropriate for
classes whose behavior is parameterized by an underlying resource

Avoid using String and : prefer primitives to
boxed primitives, and watch out for unintentional autoboxing as Autobox creates unnessasary objects???????????

Nulling out object references should be the exception rather than the norm.
The best way to eliminate an obsolete reference is to let the variable that contained
the reference fall out of scope. This occurs naturally if you define each variable in
the narrowest possible scope
Eleminate obsolete ref with null****************

A third common source of memory leaks is listeners and other callbacks.
If you implement an API where clients register callbacks but don’t deregister them
explicitly, they will accumulate unless you take some action. One way to ensure
that callbacks are garbage collected promptly is to store only weak references to
them, for instance, by storing them only as keys in a WeakHashMap??????????? example??????


To protect nonfinal classes from finalizer attacks,
write a final finalize method that does nothing????????????????explain

Autoclosable???????????

Always use try-with-resources in preference to tryfinally when working with resources that must be closed???????????

==============================================================================================
==============================================================================================
CHAPTER  2:
CHAPTER  2:


Common methods in All Objects:
when not to override equals:
A superclass has already overridden equals, and the superclass behavior
is appropriate for this class
The class is private or package-private, and you are certain that its equals
method will never be invoked

One kind of value class that does not require the equals method to be overridden is a class that uses instance control (Item 1) to ensure that at most one object
exists with each value. Enum types (Item 34) fall into this category. For these
classes, logical equality is the same as object identity, so Object’s equals method
functions as a logical equals method

==============


Don’t substitute another type for Object in the equals declaration. It is not
uncommon for a programmer to write an equals method that looks like this
and then spend hours puzzling over why it doesn’t work properly:
// Broken - parameter type must be Object!
public boolean equals(MyClass o) {
...
}
The problem is that this method does not override Object.equals, whose
argument is of type Object, but overloads it instead

in practice, a class implementing
Cloneable is expected to provide a properly functioning public clone method.

Clone contrat:
the expression
x.clone() != x
will be true, and the expression
x.clone().getClass() == x.getClass()
will be true, but these are not absolute requirements. While it is typically the
case that
x.clone().equals(x)
will be true, this is not an absolute re

immutable classes should never provide a clone method??????????????????Clonable???????????

Clone vs copyconstructor vs factory copy??/

By implementing Comparable, a class indicates that its instances have a natural ordering

==============
For example, consider the BigDecimal class, whose compareTo method is
inconsistent with equals. If you create an empty HashSet instance and then add
new BigDecimal("1.0") and new BigDecimal("1.00"), the set will contain two
elements because the two BigDecimal instances added to the set are unequal
when compared using the equals method. If, however, you perform the same
procedure using a TreeSet instead of a HashSet, the set will contain only one
element because the two BigDecimal instances are equal when compared using
the compareTo method. (See the BigDecimal documentation for details.)*************************

java8 comparator constrction methods:
In Java 8, the Comparator interface was outfitted with a set of comparator
construction methods, which enable fluent construction of comparators. These
comparators can then be used to implement a compareTo method, as required by
the Comparable interface. Many programmers prefer the conciseness of this
approach, though it does come at a modest performance cost: sorting arrays of
PhoneNumber instances is about 10% slower on my machine. When using this
approach, consider using Java’s static import facility so you can refer to static
comparator construction methods by their simple names for clarity and brevity.
Here’s how the compareTo method for PhoneNumber looks using this approach:
// Comparable with comparator construction methods
private static final Comparator<PhoneNumber> COMPARATOR =
comparingInt((PhoneNumber pn) -> pn.areaCode)
.thenComparingInt(pn -> pn.prefix)
.thenComparingInt(pn -> pn.lineNum);
public int compareTo(PhoneNumber pn) {
return COMPARATOR.compare(this, pn);
}
***************************************************
comparator constrction methods example with java8 Streams*************

============================
stream
============================

============
lambda:
In Java 8, functional interfaces, lambdas, and method references were added to
make it easier to create function objects.

functional interfaces,

Don’t use anonymous classes for function objects unless you
have to create instances of types that aren’t functional interfaces

Method ref vs Lambda:????????????????????
on’t use anonymous classes for function objects unless you
have to create instances of types that aren’t functional interfaces
Method Ref Type Example Lambda Equivalent
Static Integer::parseInt str -> Integer.parseInt(str)
Bound Instant.now()::isAfter Instant then = Instant.now();
t -> then.isAfter(t)
Unbound String::toLowerCase str -> str.toLowerCase()
Class Constructor TreeMap<K,V>::new () -> new TreeMap<K,V>
Array Constructor int[]::new len -> new int[len]



Java8 Map  vs Streams*************????????/
Stream Vs Iteration??

toMap Vs groupingBy??

return iterable instead of stream
In summary, when writing a method that returns a sequence of elements,
remember that some of your users may want to process them as a stream while
others may want to iterate over them. Try to accommodate both groups. If it’s feasible to return a collection, do so. If you already have the elements in a collection
or the number of elements in the sequence is small enough to justify creating a
new one, return a standard collection such as ArrayList. Otherwise, consider
implementing a custom collection as we did for the power set. If it isn’t feasible to
return a collection, return a stream or iterable, whichever seems more natural. If,
in a future Java release, the Stream interface declaration is modified to extend
Iterable, then you should feel free to return streams because they will allow for
both stream processing and iteration

============


Methods:
Instance fields of public classes should rarely be public (Item 16). If an
instance field is nonfinal or is a reference to a mutable object, then by making it
public, you give up the ability to limit the values that can be stored in the field.
This means you give up the ability to enforce invariants involving the field. Also,
you give up the ability to take any action when the field is modified, so classes
with public mutable fields are not generally thread-safe. Even if a field is final
and refers to an immutable object, by making it public you give up the flexibility
to switch to a new internal data representation in which the field does not exist.

prefer accessor methods not public fields.

To minimize mutability:
. Don’t provide methods that modify the object’s state (known as mutators).
2. Ensure that the class can’t be extended. This prevents careless or malicious
subclasses from compromising the immutable behavior of the class by
behaving as if the object’s state has changed. Preventing subclassing is
generally accomplished by making the class final, but there is an alternative
that we’ll discuss later.
3. Make all fields final. This clearly expresses your intent in a manner that is enforced by the system. Also, it is necessary to ensure correct behavior if a reference to a newly created instance is passed from one thread to another without
synchronization, as spelled out in the memory model [JLS, 17.5; Goetz06, 16].
4. Make all fields private. This prevents clients from obtaining access to
mutable objects referred to by fields and modifying these objects directly.
While it is technically permissible for immutable classes to have public final
fields containing primitive values or references to immutable objects, it is not
recommended because it precludes changing the internal representation in a
later release (Items 15 and 16).
5. Ensure exclusive access to any mutable components. If your class has any
fields that refer to mutable objects, ensure that clients of the class cannot obtain
references to these objects. Never initialize such a field to a client-provided
object reference or return the field from an accessor. Make defensive copies
(Item 50) in constructors, accessors, and readObject methods ???????????????????????????


Favour Composition over Inheritence????????????????

Prefer interfaces to abstract classs???????????????????

