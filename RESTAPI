
REST API exaple:
https://github.com/mariazevedo88/travels-java-api

========================
all data exchange between services happens either through messages or API calls
two types of API:

Public APIs that client applications call.
Backend APIs that are used for interservice communication.

A public API must be compatible with client applications, typically browser applications or native mobile applications. Most of the time, that means the public API will use REST over HTTP. For the backend APIs, however, you need to take network performance into account. Depending on the granularity of your services, interservice communication can result in a lot of network traffic. Services can quickly become I/O bound. For that reason, considerations such as serialization speed and payload size become more important. Some popular alternatives to using REST over HTTP include gRPC, Apache Avro, and Apache Thrift. These protocols support binary serialization and are generally more efficient than HTTP

REST versus RPC. Consider the tradeoffs between using a REST-style interface versus an RPC-style interface.
REST is resource-oriented.	RPC is action-oriented.
2

Supports HTTP methods GET, POST, PUT, PATCH, and DELETE.	RPC only supports GET and POST requests.
3

It provides flexibility for hardware architecture	no flexibility in RPC for hardware architecture
4

It supports hypermedia and hyperlinks 	It does not supports hypermedia and hyperlinks
5

REST allows to specify Content-types or accept headers	Require payloads of a few data types as XML for XML-RPC.


REST models resources, which can be a natural way to express your domain model. It defines a uniform interface based on HTTP verbs, which encourages evolvability. It has well-defined semantics in terms of idempotency, side effects, and response codes. And it enforces stateless communication, which improves scalability.

RPC is more oriented around operations or commands. Because RPC interfaces look like local method calls, it may lead you to design overly chatty APIs. However, that doesn't mean RPC must be chatty. It just means you need to use care when designing the interface.

For a RESTful interface, the most common choice is REST over HTTP using JSON. For an RPC-style interface, there are several popular frameworks, including gRPC, Apache Avro, and Apache Thrift.

Efficiency. Consider efficiency in terms of speed, memory, and payload size. Typically a gRPC-based interface is faster than REST over HTTP.

Interface definition language (IDL). An IDL is used to define the methods, parameters, and return values of an API. An IDL can be used to generate client code, serialization code, and API documentation. IDLs can also be consumed by API testing tools such as Postman. Frameworks such as gRPC, Avro, and Thrift define their own IDL specifications. REST over HTTP does not have a standard IDL format, but a common choice is OpenAPI (formerly Swagger). You can also create an HTTP REST API without using a formal definition language, but then you lose the benefits of code generation and testing.

Serialization. How are objects serialized over the wire? Options include text-based formats (primarily JSON) and binary formats such as protocol buffer. Binary formats are generally faster than text-based formats. However, JSON has advantages in terms of interoperability, because most languages and frameworks support JSON serialization. Some serialization formats require a fixed schema, and some require compiling a schema definition file. In that case, you'll need to incorporate this step into your build process.

Framework and language support. HTTP is supported in nearly every framework and language. gRPC, Avro, and Thrift all have libraries for C++, C#, Java, and Python. Thrift and gRPC also support Go.

Compatibility and interoperability. If you choose a protocol like gRPC, you may need a protocol translation layer between the public API and the back end. A gateway can perform that function. If you are using a service mesh, consider which protocols are compatible with the service mesh. For example, linkerd has built-in support for HTTP, Thrift, and gRPC.

Our baseline recommendation is to choose REST over HTTP unless you need the performance benefits of a binary protocol. REST over HTTP requires no special libraries. It creates minimal coupling, because callers don't need a client stub to communicate with the service. There are rich ecosystems of tools to support schema definitions, testing, and monitoring of RESTful HTTP endpoints. Finally, HTTP is compatible with browser clients, so you don't need a protocol translation layer between the client and the backend.

=========================================================================
api Versioning:
Whenever possible, make API changes backward compatible. For example, avoid removing a field from a model, because that can break clients that expect the field to be there. Adding a field does not break compatibility, because clients should ignore any fields they don't understand in a response. However, the service must handle the case where an older client omits the new field in a request.

Support versioning in your API contract:
Consider using semantic versioning for service versions. Semantic versioning uses a MAJOR.MINOR.PATCH format. However, clients should only select an API by the major version number, or possibly the minor version if there are significant (but non-breaking) changes between minor versions

======================

REST APIs are designed around resources, which are any kind of object, data, or service that can be accessed by the client
Many web APIs use JSON as the exchange format. 

REST APIs use a stateless request model. HTTP requests should be independent and may occur in any order, so keeping transient state information between requests is not feasible. The only place where information is stored is in the resources themselves, and each request should be an atomic operation. This constraint enables web services to be highly scalable, because there is no need to retain any affinity between clients and specific servers. Any server can handle any request from any client. That said, other factors can limit scalability. For example, many web services write to a backend data store, which may be hard to scale out

When possible, resource URIs should be based on nouns (the resource) and not verbs (the operations on the resource).

Sending an HTTP GET request to the collection URI retrieves a list of items in the collection. Each item in the collection also has its own unique URI. An HTTP GET request to the item's URI returns the details of that item

Avoid requiring resource URIs more complex than collection/item/collection as
/customers/1/orders/99/products should be break into two calls

GET retrieves a representation of the resource at the specified URI. The body of the response message contains the details of the requested resource.
POST creates a new resource at the specified URI. The body of the request message provides the details of the new resource. Note that POST can also be used to trigger operations that don't actually create resources.
PUT either creates or replaces the resource at the specified URI. The body of the request message specifies the resource to be created or updated.
PATCH performs a partial update of a resource. The request body specifies the set of changes to apply to the resource.
DELETE removes the resource at the specified URI.

A POST request creates a resource. The server assigns a URI for the new resource, and returns that URI to the client. In the REST model, you frequently apply POST requests to collections. The new resource is added to the collection. "A POST request can also be used to submit data for processing to an existing resource, without any new resource being created"

A PUT request creates a resource or updates an existing resource. The client specifies the URI for the resource. The request body contains a complete representation of the resource. If a resource with this URI already exists, it is replaced. Otherwise a new resource is created, if the server supports doing so. PUT requests are most frequently applied to resources that are individual items, such as a specific customer, rather than collections. A server might support updates but not creation via PUT. Whether to support creation via PUT depends on whether the client can meaningfully assign a URI to a resource before it exists. If not, then use POST to create resources and PUT or PATCH to update
PUT VS POST?????????

A PATCH request performs a partial update to an existing resource. The client specifies the URI for the resource. The request body specifies a set of changes to apply to the resource. This can be more efficient than using PUT, because the client only sends the changes, not the entire representation of the resource. Technically PATCH can also create a new resource (by specifying a set of updates to a "null" resource), if the server supports this.

PUT requests must be idempotent. If a client submits the same PUT request multiple times, the results should always be the same (the same resource will be modified with the same values). "POST and PATCH requests are not guaranteed to be idempotent"

The Content-Type header in a request or response specifies the format of the representation

in a POST request, the request body contains a representation of the resource to create. In a GET request, the response body contains a representation of the fetched resource


when to specify Content-Type header and Accept header in request/response???????????????????

Asynchronous operations:

consider making the operation asynchronous. Return HTTP status code 202 (Accepted) to indicate the request was accepted for processing but is not completed

1. You should expose an endpoint that returns the status of an asynchronous request, so the client can monitor the status by polling the status endpoint. Include the URI of the status endpoint in the Location header of the 202 response

2. If the client sends a GET request to this endpoint, the response should contain the current status of the request. Optionally, it could also include an estimated time to completion or a link to cancel the operation

3. If the asynchronous operation creates a new resource, the status endpoint should return status code 303 (See Other) after the operation completes. In the 303 response, include a Location header that gives the URI of the new resource

Filter and Paginate Data:
========================

Instead, the API can allow passing a filter in the query string of the URI, such as /orders?minCost=n. The web API is then responsible for parsing and handling the minCost parameter in the query string and returning the filtered results on the server side
/orders?limit=25&offset=50

You can extend this approach to limit the fields returned for each item, if each item contains a large amount of data. For example, you could use a query string parameter that accepts a comma-delimited list of fields, such as /orders?fields=ProductID,Quantity


partial responses for large binary resources
============================================

A resource may contain large binary fields, such as files or images. To overcome problems caused by unreliable and intermittent connections and to improve response times, consider enabling such resources to be retrieved in chunks. To do this, the web API should support the Accept-Ranges header for GET requests for large resources. This header indicates that the GET operation supports partial requests

1. define byte size?
2.consider implementing HTTP HEAD requests for these resources. A HEAD request is similar to a GET request, except that it only returns the HTTP headers that describe the resource, with an empty message body. 
?????????????????????????????????????

URI Versioning:
Each time you modify the web API or change the schema of resources, you add a version number to the URI for each resource. The previously existing URIs should continue to operate as before, returning resources that conform to their original schema

Query String Versioning
https://adventure-works.com/customers/3?version=2

header Versioning
GET https://adventure-works.com/customers/3 HTTP/1.1
Custom-Header: api-version=1

media-type version
GET https://adventure-works.com/customers/3 HTTP/1.1
Accept: application/vnd.adventure-works.v1+json


ref: https://www.youtube.com/watch?v=J4J-eHq_Oms

Long Running Operations

They vary in name
from one language to another (Python calls them Futures, JavaScript calls them Promises), but the goal is simple: start some work but don’t necessarily block on it. Instead,
return an object that represents a placeholder for it. Then, perform the work and
allow the placeholder to eventually either resolve (succeed with a result) or reject
(throw an error). To handle these different scenarios, users can either register callbacks on the placeholder that will handle the result asynchronously or wait on the
result to be returned, blocking code execution until resolution or rejection of that
placeholder (effectively making the asynchronous work synchronous).

Location header will have link/status for where operation is happenng; return is 202 Not 200 or 303 when re-directed
the link received above return status, success , failed ,in progress
Alternatively; can response with code 200 and token and location in response body

Polling to check status of LRO
LROs are promises or futures for web APIs that act as a tool for tracking work
being done in the background by an API service.
 LROs are parameterized interfaces, returning a specific result type (e.g., the
resource resulting from the operation) and a metadata type for storing progress
information about the operation itself.
 LROs resolve after a certain amount of time to a result or an error and users discover this either by polling for status updates periodically or being notified of a
result while waiting.
 LROs may be paused, resumed, or canceled at the discretion of the API and
rely on custom methods to do so.
 LROs should be persisted to storage but should generally expire after some
standard period of time, such as 30 days

UPSERT:
  PUT Request to create/update resource and send whole resource body
  only when server trusts put to create resource??????????????????
  if id is sent in path; and resource doesn't exist; than gives 404 thus return in body
  
  REST API headers:
     headers are sort of metadata
	   response header
	       content-type,srver
	   request header
	       host,user-agent,accept language, accept-encoding: gzip
	   payload header
	   respresentational header
         content-type,content-encodng,content-length
	  
