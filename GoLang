query:
go example that calls multiple rest api

compare sync Vs parallel:
https://github.com/atkinsonbg/calling-apis-concurrently-go-waitgroups/blob/main/synchronous/synchronous.go

Calling multiple REST APIs in parallel:
https://www.eventslooped.com/posts/golang-make-multiple-api-calls/




================================


https://www.youtube.com/watch?v=yyUHQIec83I
https://gobyexample.com/for



https://github.com/kat-co/concurrency-in-go-src/tree/master/an-introduction-to-concurrency/why-is-concurrency-hard/deadlocks-livelocks-and-starvation


>>>>>>>>>>>>>>>>>>>>>>>>>
 GO DEMO:


save to create mod file that has packages
everthingis a packages

>>>>>>>

go env -w GO111MODULE=on

>>>>>>>>>

EX 1:
package main

import "fmt"

func main() {
	fmt.Print("HelloWorld")
	fmt.Print("HelloWorld 2")
}

go run main.go

=======================

EX 2:
var firstName string
	fmt.Println("Enter Your First Name: ")
	fmt.Scanln(&firstName)
	fmt.Println("Welcome ", firstName)
====================

EX 3:
DataType:

	var userName string
	var userTickets int
	userName = "Tom"
	userTickets = 100
	fmt.Printf("User %v booked %v tickets\n", userName, userTickets)
	
========================

EX 4:
Just 1 type loop: for loop




======================

ex5:
 Map :
 To create an empty map, use the builtin make: make(map[key-type]val-type).
 
 j := 3
	switch j {
	case 1:
		fmt.Println("One")
	case 3:
		fmt.Println("Two")
	}

	m := make(map[string]int)
	m["k1"] = 1111
	m["k2"] = 2222

	fmt.Println("Map is ", m)

	v1 := m["k1"]

	delete(m, "k2")
	fmt.Println("v1:========> ", v1)
===============================


ex 7:
 Function and closures:
 This function intSeq returns another function, which we define anonymously in the body of intSeq. The returned function closes over the variable i to form a closure.
 
 https://gobyexample.com/multiple-return-values
 func main() {
	res := plus(1, 2)
	fmt.Println("sum is ", res)
	nextInt := intSeq()
	fmt.Println(nextInt())
}

func plus(a int, b int) int {
	return a + b
}

func intSeq() func() int {
	i := 0
	return func() int {
		i += 4
		return i

	}
}

=============================

ex 8:


Go supports methods defined on struct types. ??? Struct Type means??

Methods can be defined for either pointer or value receiver types. Hereâ€™s an example of a value receiver.
type rect struct {
	width, height int
}
func (r *rect) area() int {
	return r.width * r.height
}
func main() {
	r := rect{width: 10, height: 5}
	fmt.Println("area", r.area())
}

==================================

 ***************************Go Routine:
 
 TO DO:
 Channel Vs goRoutine Vs Channel Buffering
 
 ========================
 
 Channel Buffering:
 
 By default channels are unbuffered, meaning that they will only accept sends (chan <-) if there is a corresponding receive (<- chan) ready to receive the sent value. Buffered channels accept a limited number of values without a corresponding receiver for those values
 
 messages := make(chan string, 2)
	messages <- "ping"
	messages <- "pong"
	fmt.Println(<-messages)
	fmt.Println(<-messages)
	
	
===============

ex 9:
channel directions:
func worker(done chan bool) { // each goroutine has channel assigned
	fmt.Print("working...")
	time.Sleep(time.Second)
	fmt.Println("done")
	done <- true
}

func main() {
	done := make(chan bool, 1)
	go worker(done)
	<-done
}



CASE1: DEFINE CHANNEL AND CONCURRENCY 
func CalculatePi(begin, end int64) <-chan uint


CASE 2: Example to show how many routines can be run
memConsumed := func() uint64 {



CASE 3:
Context switching between OS threads and goRoutines 
taskset -c 0 perf bench sched pipe -T


CASE4:
benchmark context switching:
BenchmarkContextSwitch
\\

CASE 4:
Mutex example for shared memory
sync.Once
Pool example 


CASE 5:
Example of Closed Stream and seperate in and out stream



CASE 6:
CHANNEL STATE AND RETURN TYPE.
range as alternative to NOT to read the default values from closed channel


CASE 7 :
example of go pipeline:
generator := func(done <-chan interface{}, integers ...int) <-chan int {


CASE 8:
or-Done, tee Channel



CASE 9:
Example of signal from parent to chil; to avoid go routine leaks




CASE 10:
error handling in go


CASE 11:
go pipeline








Adhaar: 0102101104758320220117102438

399090073338


example comparing ccurrency in go and java:
https://medium.com/@damithadayananda/golang-vs-java-concurrency-a-comparative-study-b0aea90f5fd7




to do:
https://github.com/lotusirous/go-concurrency-patterns (google talk)

>>>>>>>>>>>>>>>>>>>
go practical demo:
https://blog.devgenius.io/concurrency-with-sample-project-in-golang-297400beb0a4

How User uses GO:
https://eng.uber.com/go-geofence-highest-query-per-second-service/



Web Application:
https://github.com/sohamkamani/blog_example__go_web_app/blob/master/bird_handlers_test.go





>>>>>>>>>>>>>>>>>>
why golang for microservices:
https://blog.getambassador.io/go-kubernetes-rapidly-developing-golang-microservices-bfe36cfb5893

TO DO:
 build contenierized app in golang in k8:
 https://www.coding-bootcamps.com/blog/build-containerized-applications-with-golang-on-kubernetes.html
 
	https://www.bacancytechnology.com/blog/golang-use-cases
	
	QPS using Go????
	
 
======================================

SyNC CALL: WITH GOROUTINE
============================
package main

import (
	"encoding/json"
	"fmt"
	"log"
	"sync"
	"time"
)

type City struct {
	Name       string
	Population int
	Households int
	Temp       int
	Forecast   string
	Elevation  int
	Lat        float64
	Long       float64
}

// Main function
func main() {
	defer timeTrack(time.Now(), "Fetching city info")

	fmt.Println("Starting concurrent calls...")

	var waitgroup sync.WaitGroup
	waitgroup.Add(3)

	city := City{Name: "Richmond"}

	go func() {
		getDemoInfo(&city)
		waitgroup.Done()
	}()

	go func() {
		getCurrentWeather(&city)
		waitgroup.Done()
	}()

	go func() {
		getMapInfo(&city)
		waitgroup.Done()
	}()

	waitgroup.Wait()

	data, _ := json.Marshal(city)
	fmt.Printf("%s\n", data)
}

func getDemoInfo(c *City) {
	// Calling Sleep method (lag)
	time.Sleep(2100 * time.Millisecond)

	c.Population = 230436
	c.Households = 90301
}

func getCurrentWeather(c *City) {
	// Calling Sleep method (lag)
	time.Sleep(1200 * time.Millisecond)
	c.Temp = 32
	c.Forecast = "Snow, turning to rain"
}

func getMapInfo(c *City) {
	// Calling Sleep method (lag)
	time.Sleep(3300 * time.Millisecond)

	c.Elevation = 457
	c.Lat = 37.533333333
	c.Long = -77.466666666
}

func timeTrack(start time.Time, name string) {
	elapsed := time.Since(start)
	log.Printf("%s took %s", name, elapsed)
}



============================***********************========================


WITHOUT GO ROUTINE:
==================

package main

import (
	"encoding/json"
	"fmt"
	"log"
	"time"
)

type City struct {
	Name       string
	Population int
	Households int
	Temp       int
	Forecast   string
	Elevation  int
	Lat        float64
	Long       float64
}

// Main function
func main() {
	defer timeTrack(time.Now(), "Fetching city info")

	fmt.Println("Starting synchronous calls...")

	city := City{Name: "Richmond"}

	getDemoInfo(&city)
	getCurrentWeather(&city)
	getMapInfo(&city)

	data, _ := json.Marshal(city)
	fmt.Printf("%s\n", data)
}

func getDemoInfo(c *City) {
	// Calling Sleep method (lag)
	time.Sleep(2100 * time.Millisecond)

	c.Population = 230436
	c.Households = 90301
}

func getCurrentWeather(c *City) {
	// Calling Sleep method (lag)
	time.Sleep(1200 * time.Millisecond)
	c.Temp = 32
	c.Forecast = "Snow, turning to rain"
}

func getMapInfo(c *City) {
	// Calling Sleep method (lag)
	time.Sleep(3300 * time.Millisecond)

	c.Elevation = 457
	c.Lat = 37.533333333
	c.Long = -77.466666666
}

func timeTrack(start time.Time, name string) {
	elapsed := time.Since(start)
	log.Printf("%s took %s", name, elapsed)
}



